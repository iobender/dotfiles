alias sag="sudo apt-get" # shortcut for apt-get
alias sagi="sudo apt-get install" # install binaries
alias sagud="sudo apt-get update" # update binaries
alias sagug="sudo apt-get upgrade" # install updated binaries
alias sagr="sudo apt-get remove" # remove binary

alias please="sudo fc -nl -1" # repeat last command as super-user
alias needit='sudo $(history -p \!\!)' # repeat last command as super-user

alias sudo="sudo " # trailing space causes next command to be checked for alias expansion as well
alias cp="cp -i"
#alias rm="rm -vI"
alias rm="rm -vi"
alias mv="mv -i"
alias du="du -hs"
alias df="df -h"
alias strings="strings -a" # inhibits use of libbfd, see http://www.reddit.com/r/netsec/comments/2kazw2/dont_run_strings_on_untrusted_files/
alias clip="xclip -selection c" # copy text to clipboard. To also output it, add -f
alias pst="(xclip -o && echo)" # pastes contents of clipboard
alias clr="sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g'" # clear ansi escape sequences
alias res="sudo shutdown -r now"
alias sus="sudo pm-suspend"
alias clr="clear"
alias cls="clear; ls"
alias rn="rename"
alias ercho=">&2 echo"

PS_ARGS="pid,uid,comm,start,etime,%cpu,%mem"
alias ps="ps -o $PS_ARGS"
alias psa="\ps -eo $PS_ARGS"

alias ocaml="rlwrap ocaml"
alias py="python3"
alias ipy="ipython qtconsole --pylab=inline 2>/dev/null >/dev/null &"
alias sqlite="sqlite3"

alias bc="bc -q -l"
alias pgrep="pgrep -l"
alias igrep="grep -i"
alias hex="hexdump -C"

alias todo="vim ./TODO"
alias td="vim ~/TODO"

alias gpg="gpg --no-use-agent"

alias pause=read # wait for the user to press enter
ch () {
	google-chrome "$@" >/dev/null 2>&1 &
}
ich () {  
	google-chrome --incognito "$@" 2>/dev/null &
}
ff () {
	firefox "$@" >/dev/null 2>&1 &
}
iff () {
	firefox --private "$@" >/dev/null 2>&1 &
}

alias opn="gnome-open >/dev/null 2>&1"
alias shutter="shutter >/dev/null 2>&1 &"
alias rstudio="rstudio >/dev/null 2>&1 &"

alias json="python -m json.tool"

alias pipes="pipes -p 6 -r 0 -R; reset"
alias cmatrix="cmatrix -bs"

tm() {
	if [ $# -eq 0 ]; then
		tmux attach
	else
		tmux attach -t $1
	fi
}

# srcreenshots and alerts and makes a sound when done
scrot () {
	command scrot $@;
	alert "Screenshot taked";
	suc;
}

# searches for a string in all source code in the current directory tree
sgrep () {
	grep -RIin --include='*.c' --include='*.h' --include='*.py' --include='*.java' --include='*.rb' --include='*.asm' --include='*.cpp' --include='*.hpp' --include='*.pl' --include='*.sh' --include='*.hs' --include='*.ml' --include='*.mli' --exclude-dir="_*" "$@" .
}

# highlights instances of search term by grepping for it or start of line
hl () {
	grep -E "^|$1" ${@:2}
}

fz () {
	find . -iname "*$1*"
}

gr () {
	grep -RiI "$1" .
}

cnt () {
	find "$1" -type f | wc -l
}

# `repeat n cmd cmd-args` repeats a command n times
repeat () {
	for i in $(eval echo {1..$1}); do
		${@:2};
	done;
}

# move an item to the trash
trash () {
	mv "$@" ~/etc/trash
}

seeall () {
	for file in "$@"; do
		clear
		echo $file:
		echo -------------------------
		echo
		cat $file
		pause
	done
}

# view IP address(es)
ipaddr () {
	ifconfig | grep inet\ addr | awk -F: '{ print $2 }' | awk '{ print $1 }';
	curl ifconfig.me
}

batlife () {
	upower -i $(upower -e | tail -1) | grep percentage | sed 's/[^0-9]//g';
	# cat /sys/class/power_supply/BAT0/capacity
}

#$@ so we can do 'hdr 3 printf', for example
hdr () {
	man "$@" | grep \#include | sed 's/^\s*//'
}

# DIRECTORY CONTROLS ###########################################################

# sources directory specific run commands (in .cdrc) on cd to that directory
cd () { 
	if [ $# -eq 0 ]; then
		dir=~
	else
		dir="$1"
	fi

	builtin cd "$dir"; 
	local exit_code=$?;
	[ -f .cdrc ] && source ./.cdrc 2>/dev/null;
	return $exit_code
}

alias ..="cd .." # go up a directory
alias ...="cd ../.." # go up 2 directories
alias ....="cd ../../.." # go up 3 directories
alias back="cd -" # go to last directory

# make directory and change to it
mkcd () {
	mkdir "$@" && cd "$1";
}

alias dls="cd ~/dls"
alias docs="cd ~/docs"
alias plg="cd ~/playground"

alias pkp="cd ~/docs/pkp"
alias umd="cd ~/docs/umd"

alias frfa="cd ~/docs/umd/frfa"
alias frsp="cd ~/docs/umd/frsp"
alias sofa="cd ~/docs/umd/sofa"
alias sosp="cd ~/docs/umd/sosp"
alias jufa="cd ~/docs/umd/jufa"
alias jusp="cd ~/docs/umd/jusp"
alias sefa="cd ~/docs/umd/sefa"
alias sesp="cd ~/docs/umd/sesp"

alias 393="jufa; cd engl393"
alias 396="jufa; cd cmsc396"
alias 406="jufa; cd math406"
alias 412="jufa; cd cmsc412"
alias geekos="jufa; cd cmsc412/geekos-project"
alias 456="jufa; cd cmsc456"
alias 219="jusp; cd honr219T"
alias 403="jusp; cd math403"
alias 421="jusp; cd cmsc421"
alias 430="jusp; cd cmsc430"
alias 445="sefa; cd math445"
alias 451="sefa; cd cmsc451"
alias 631="sefa; cd cmsc631"
alias 400="sefa; cd stat400"
alias 376="sefa; cd edsp376"
alias cli="sefa; cd cmscCLI"
alias 377="sesp; cd hlth377"
alias 238="sesp; cd honr238v"
alias 320="sesp; cd cmsc320"
alias 414="sesp; cd cmsc414"
alias 157="sesp; cd knes157n"

# CONFIG FILES #################################################################

alias als="vim ~/.aliases && source ~/.aliases" # edit list of aliases
alias bashrc="vim ~/.bashrc && source ~/.bashrc" # edit .bashrc
alias cdrc="vim .cdrc && source .cdrc"
alias vimrc="vim ~/.vimrc" # edit vim configs
alias gvimrc="vim ~/.gvimrc" # edit gvim configs
alias f5="source ~/.bashrc; source ~/.aliases; [ -f .cdrc ] && source .cdrc"

# NOISES #######################################################################

alias ns="paplay" # play a noise
alias suc="ns /usr/share/sounds/freedesktop/stereo/complete.oga" # success noise
alias pop="ns /usr/share/sounds/freedesktop/stereo/message.oga" # pop noise
alias fail="ns /usr/share/sounds/ubuntu/stereo/system-ready.ogg" # failure noise

# GAMES? ####

alias mc="java -jar ~/media/games/Minecraft.jar"


# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
	test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
	alias ls='ls --color=auto'
	#alias dir='dir --color=auto'
	#alias vdir='vdir --color=auto'

	alias grep='grep --color=auto'
	alias fgrep='fgrep --color=auto'
	alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'

alias accts="vim ~/docs/info/accounts.txt"

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# says something, use 'say -es Queso and other stuff'
say()
{
	if [[ "${1}" =~ -[a-z]{2} ]]; then
		local lang=${1#-}
		local text="${*#$1}"
	else
		local lang=${LANG%_*}
		local text="$*"
	fi
	mplayer "http://translate.google.com/translate_tts?ie=UTF-8&tl=${lang}&q=${text}" &> /dev/null
}

alias speedtest='wget -O /dev/null http://speedtest.wdc01.softlayer.com/downloads/test100.zip'

alias randgraph='while true; do echo $RANDOM; sleep 0.7; done | stag'

# argprint
ap () {
	n=1
	while [ $# -gt 0 ]; do
		echo $n: "$1"
		shift 1
		n=$((n+1))
	done
}

t () {
	[ "$@" ] && echo YES || echo NO
}

tn () {
	[ "$@" ] && suc || fail
}

alias up="tmux send -t music.0 fg ENTER" # unpause
alias pa="tmux send -t music.0 C-Z" # pause

# print current song from cmus
csng () {
	cmusstatus=$(cmus-remote -Q)
	artist=$(echo -e "$cmusstatus" | grep "tag artist" | cut -d' ' -f3-)
	title=$(echo -e "$cmusstatus" | grep "tag title" | cut -d' ' -f3-)
	album=$(echo -e "$cmusstatus" | grep "tag album" | cut -d' ' -f3-)
	tracknumber=$(echo -e "$cmusstatus" | grep "tag tracknumber" | cut -d' ' -f3-)
	echo $artist \| $title \| $album \| $tracknumber 
}

# cut files to 'clipboard', aka a directory holding them
cuf () {
	if [ $# -eq 0 ]; then
		echo "Usage: cuf [files]"
		return 1
	fi

	# remove previous files from clipboard, if any
	if [ -d ~/.clip-files ]; then
		\rm -rf ~/.clip-files
	fi
	# recreate clipboard
	mkdir ~/.clip-files

	for f in "$@"; do
		mv "$f" ~/.clip-files
	done
}

# copy files to 'clipboard', aka a directory holding them
cof () {
	if [ $# -eq 0 ]; then
		echo "Usage: caf [files]"
		return 1
	fi

	# remove previous files from clipboard, if any
	if [ -d ~/.clip-files ]; then
		\rm -rf ~/.clip-files
	fi
	# recreate clipboard
	mkdir ~/.clip-files

	for f in "$@"; do
		cp "$f" ~/.clip-files
	done
}

# paste files from clipboard into given directory, or current if none given
paf () {
	if [ ! -d ~/.clip-files ]; then
		echo "Error: ~/.clipfiles: no such directory"
		return 1
	fi
	
	if [ $# -eq 0 ]; then
		pastedir=.
	elif [ $# -eq 1 ]; then
		pastedir=$1
	else
		echo "Usage: paf [directory]"
		return 2
	fi

	cp -r ~/.clip-files/* "$pastedir"
}


function pydo {
    if [ $# -le 0 ]; then
        echo "Usage: pydo \"command\""
        return 1
    fi
    python -c "exec(\"import os, random, sys\\nfor (n, line) in enumerate(map(lambda l: l.strip(), sys.stdin)):\\n\\tprint $@\")"
}

# opens pages in your browser
function inet {
    if [ "$1" = --help -o "$1" = -h ]; then
        echo "Usage: $FUNCNAME <site> <target>"
        echo $FUNCNAME google stuff - searches Google for "stuff"
        echo $FUNCNAME wp stuff - searches Wikipedia for "stuff"
        echo $FUNCNAME yt stuff - searches YouTube for "stuff"
        echo $FUNCNAME ytc channel - opens YouTube channel "channel"
        echo $FUNCNAME reddit stuff - searched Reddit for stuff
        echo $FUNCNAME r subreddit - opens subreddit "subreddit"
        echo $FUNCNAME az product - searches Amazon for "product"
        echo $FUNCNAME dict word - searches Google for "define word"
        echo $FUNCNAME ud word - searches UrbanDictionary for "word"
        return
    fi

    browser=google-chrome
    if [ $# -lt 2 ]; then
        echo "Usage: $FUNCNAME <site> <target>"
        return
    fi
    site="$1"
    shift
    target=$(echo "$@" | sed s/\ /+/g)

    case "$site" in 
    google)
        url="https://www.google.com/#q=$target" ;;
    wp)
        url="http://en.wikipedia.org/w/index.php?title=Special:Search&search=$target" ;;
    yt)
        url="http://www.youtube.com/results?search_query=$target&page={startPage?}&utm_source=opensearch" ;;
    ytc) 
        url="https://www.youtube.com/user/$target" ;;
    reddit) 
        url="http://www.reddit.com/search?q=$target&sort=relevance&t=all" ;;
    r) 
        url="https://www.reddit.com/r/$target" ;;
    az) 
        url="http://www.amazon.com/s/ref=nb_sb_noss_1?url=search-alias%3Daps&field-keywords=$target" ;;
    dict) 
        url="https://www.google.com/#q=define+$target" ;;
    ud) 
        url="http://www.urbandictionary.com/define.php?term=$target" ;;
    *)
        echo "site $site not recognized"
        return 
        ;;
    esac

    $browser $url >/dev/null 2>&1 &
}

# directories we want to cd to from anywhere
declare -A CDAMAP
CDAMAP[dls]=~/dls
CDAMAP[docs]=~/docs
CDAMAP[plg]=~/playground
CDAMAP[umd]=~/docs/umd
CDAMAP[pkp]=~/docs/pkp
CDAMAP[frfa]=~/docs/umd/frfa
CDAMAP[frsp]=~/docs/umd/frsp
CDAMAP[sofa]=~/docs/umd/sofa
CDAMAP[sosp]=~/docs/umd/sosp
CDAMAP[jufa]=~/docs/umd/jufa
CDAMAP[jusp]=~/docs/umd/jusp
CDMAP[sefa]=~/docs/umd/sefa
CDMAP[sesp]=~/docs/umd/sesp
CDMAP[377]=~/docs/umd/sesp/hlth377
CDMAP[238]=~/docs/umd/sesp/honr238v
CDMAP[320]=~/docs/umd/sesp/cmsc320
CDMAP[414]=~/docs/umd/sesp/cmsc414
CDMAP[157]=~/docs/umd/sesp/knes157n
# cd's to any directory defined in CDAMAP
function cda {
    if [ $# -ne 1 ]; then
        echo "Usage: $FUNCNAME <dir>"
        return
    fi
    dirname="$1"
    fulldir=${CDMAP[$dirname]}
    if [ -z "$fulldir" ]; then
        echo "No directory path found for $dirname"
        return
    fi
    cd "$fulldir"
}
